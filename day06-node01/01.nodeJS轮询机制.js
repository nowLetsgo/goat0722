/* 
    nodeJS事件轮询机制：
        - JavaScript是单线程的， 那么nodejs是如何做到非阻塞呢，在nodejs内部使用了第三方库libuv，nodejs会把I/O等异步操作交由他处理，而nodejs主线程可以继续去处理其他的事情。

        - libuv会开启不同的线程去处理这些异步操作，处理完后，会把异步操作的回调函数放到nodejs的轮询队列中，nodejs会在适当的时候处理轮询队列中的回调函数，从而实现非阻塞。

        - nodeJS的轮询队列分为6个阶段，每个阶段都有一个 FIFO（先进先出） 队列来执行回调。通常情况下，当事件循环进入给定的阶段时，它将执行特定于该阶段的任何操作，然后在该阶段的队列中执行回调，直到队列用尽或最大回调数已执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段

        - 六个阶段如下
            1. timers阶段
                timers阶段用来处理setTimeout() 和 setInterval() 的回调函数
            2. pending callbacks
                这个阶段用来处理系统操作的回调函数（可以忽略）
            3. idle prepare
                此阶段是仅供nodejs内部操作调用，忽略
            4. poll阶段
                概述： 这个阶段主要用来处理如IO操作，网络请求等异步操作
                - 当进入poll阶段的时候，如果poll阶段不为空，则执行完或者到达最大执行数量，就会进入下一个阶段
                - 当进入poll阶段的时候，如果pll阶段为空，则一直等着回调函数进来，除非check阶段或者timers阶段有回调函数等待执行，才会进入下个阶段

            5. check阶段
                这个阶段用来处理setImmediate的回调函数

            6. close callbacks阶段
                 概述： 这个阶段用来处理如socket的close类似的关闭事件


*/